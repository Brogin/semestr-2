DFS(adjarr, n);

adjarr - adjacency matrix
n - number of Vertex


void DFS(int* arr, int n) {
  int c, i, dfsnum = 0, m;
  dStack ds = {0, 0};
  int cache[n];
  for(i=0;i<n;i++)
    cache[i] = 0;
  printf("number of the vertex (1-%d): ",n);
  scanf("%d",&c);
  Spush(&ds, c-1);
  cache[c-1] = 1;
  printf("%6s\t%7s\t%5s\n","Vertex","DFS-num","Stack");
  while(!Sempty(&ds)) {
    c = Spop(&ds);
    printf("%c\t%d\t",(c<n)?(c+97):(c/n+97),dfsnum+1);
    for(i=n;i!=-1;i--) {
      if(arr[c*n+i] && !cache[i]) {
	dfsnum++;
	cache[i] = 1;
	Spush(&ds, i);
      } 
    }
    Sprint(&ds);
  }
}

void Spush(dStack* D, int c) {
  (D->_size)++;
  dNode* T = (dNode*) malloc (sizeof(dNode));
  T->value = c;
  T->next = 0;
  if(D->_size > 0)
    T->next = D->Head;
  D->Head = T;
}

int Sempty(dStack* D) {
  return (!D->Head);
}

int Spop(dStack* D) {
  int m;
  if(Sempty(D))
    return 0;
  (D->_size)--;
  dNode* T = D->Head;
  D->Head = D->Head->next;
  T->next = 0;
  m = T->value;
  T->value = 0;
  free(T);
  return m;
}

void Sprint(dStack* D) {
  dNode* T;
  for(T=D->Head;T!=0;T=T->next)
    printf("%c%s",T->value+97,(T->next)?" ":"\n");
}


